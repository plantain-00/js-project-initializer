/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
// tslint:disable

export const backendAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const backendCleanReleaseConfigJs = `module.exports = {
  include: [
    'dist/*.js',
    'LICENSE',
    'package.json',
    'yarn.lock',
    'README.md'
  ],
  exclude: [
  ],
  releaseRepository: 'https://github.com/AUTHOR/REPOSITORY_NAME-release.git',
  postScript: [
    'cd "[dir]" && rm -rf .git',
    'cp Dockerfile "[dir]"',
    'cd "[dir]" && docker build -t AUTHOR/REPOSITORY_NAME . && docker push AUTHOR/REPOSITORY_NAME'
  ]
}
`
export const backendCleanScriptsConfigJs = `const { checkGitStatus } = require('clean-scripts')

const tsFiles = \`"src/**/*.ts" "spec/**/*.ts" "test/**/*.ts"\`
const jsFiles = \`"*.config.js"\`

const tscSrcCommand = 'tsc -p src/'

module.exports = {
  build: [
    'rimraf dist/',
    tscSrcCommand
  ],
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    export: \`no-unused-export \${tsFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: [
    'tsc -p spec',
    'jasmine',
    () => checkGitStatus()
  ],
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`
  },
  watch: \`\${tscSrcCommand} --watch\`
}
`
export const backendDockerfile = `FROM node:alpine
WORKDIR /app
ADD . /app
RUN apk add --no-cache make gcc g++ python && yarn --production
EXPOSE 8000
CMD ["node","dist/index.js"]
`
export const backendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const backendReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)

## install

\`\`\`bash
git clone https://github.com/AUTHOR/REPOSITORY_NAME-release.git . --depth=1 && yarn add --production
\`\`\`

## docker

\`\`\`bash
docker run -d -p \${port}:\${port} AUTHOR/REPOSITORY_NAME
\`\`\`
`
export const backendSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const backendSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendSrcIndexTs = `console.log('app started!')

process.on('SIGINT', () => {
  process.exit()
})

process.on('SIGTERM', () => {
  process.exit()
})
`
export const backendSrcTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "outDir": "../dist",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "newLine": "LF"
  }
}`
export const backendTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const backendWithFrontendAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const backendWithFrontendBrowserslistrc = `> 1%
Last 2 versions
`
export const backendWithFrontendCleanReleaseConfigJs = `module.exports = {
  include: [
    'dist/*.js',
    'static/*.bundle-*.js',
    'static/index.html',
    'LICENSE',
    'package.json',
    'yarn.lock',
    'README.md'
  ],
  exclude: [
  ],
  releaseRepository: 'https://github.com/AUTHOR/REPOSITORY_NAME-release.git',
  postScript: [
    'cd "[dir]" && rm -rf .git',
    'cp Dockerfile "[dir]"',
    'cd "[dir]" && docker build -t AUTHOR/REPOSITORY_NAME . && docker push AUTHOR/REPOSITORY_NAME'
  ]
}
`
export const backendWithFrontendCleanScriptsConfigJs = `const { Service, checkGitStatus, executeScriptAsync } = require('clean-scripts')
const { watch } = require('watch-then-execute')

const tsFiles = \`"src/**/*.ts" "static/**/*.ts" "spec/**/*.ts" "static_spec/**/*.ts"\`
const jsFiles = \`"*.config.js" "static/**/*.config.js" "static_spec/**/*.config.js"\`
const lessFiles = \`"static/**/*.less"\`

const tscSrcCommand = 'tsc -p src/'
const file2variableCommand = 'file2variable-cli --config static/file2variable.config.js'
const tscStaticCommand = 'tsc -p static/'
const webpackCommand = 'webpack --config static/webpack.config.js'
const revStaticCommand = 'rev-static --config static/rev-static.config.js'
const cssCommand = [
  'lessc static/index.less > static/index.css',
  'postcss static/index.css -o static/index.postcss.css',
  'cleancss -o static/index.bundle.css static/index.postcss.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css'
]

module.exports = {
  build: {
    back: [
      'rimraf dist/',
      tscSrcCommand
    ],
    front: [
      {
        js: [
          file2variableCommand,
          tscStaticCommand,
          webpackCommand
        ],
        css: cssCommand,
        clean: 'rimraf static/**/*.bundle-*.js static/**/*.bundle-*.css'
      },
      revStaticCommand
    ]
  },
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: {
    jasmine: [
      'tsc -p spec',
      'jasmine'
    ],
    karma: [
      'tsc -p static_spec',
      'karma start static_spec/karma.config.js'
    ],
    consistency: () => checkGitStatus()
  },
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    back: \`\${tscSrcCommand} --watch\`,
    template: \`\${file2variableCommand} --watch\`,
    front: \`\${tscStaticCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['static/**/*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`
  },
  screenshot: [
    new Service('node ./dist/index.js'),
    'tsc -p screenshots',
    'node screenshots/index.js'
  ],
  prerender: [
    new Service('node ./dist/index.js'),
    'tsc -p prerender',
    'node prerender/index.js',
    revStaticCommand
  ]
}
`
export const backendWithFrontendDockerfile = `FROM node:alpine
WORKDIR /app
ADD . /app
RUN apk add --no-cache make gcc g++ python && yarn --production
EXPOSE 8000
CMD ["node","dist/index.js"]
`
export const backendWithFrontendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const backendWithFrontendPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const backendWithFrontendPrerenderIndexHtml = ``
export const backendWithFrontendPrerenderIndexTs = `import * as puppeteer from 'puppeteer'
import * as fs from 'fs'

(async () => {
  const browser = await puppeteer.launch()
  const page = await browser.newPage()
  await page.emulate({ viewport: { width: 1440, height: 900 }, userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' })
  await page.waitFor(1000)
  await page.goto('http://localhost:8000')
  await page.waitFor(2000)
  const content = await page.evaluate(() => {
    const element = document.querySelector('#prerender-container')
    return element ? element.innerHTML.trim() : ''
  })
  fs.writeFileSync('prerender/index.html', content)

  browser.close()
})()
`
export const backendWithFrontendPrerenderTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)

## install

\`\`\`bash
git clone https://github.com/AUTHOR/REPOSITORY_NAME-release.git . --depth=1 && yarn add --production
\`\`\`

## docker

\`\`\`bash
docker run -d -p 8000:8000 AUTHOR/REPOSITORY_NAME
\`\`\`
`
export const backendWithFrontendScreenshotsIndexTs = `import * as puppeteer from 'puppeteer'

(async () => {
  const browser = await puppeteer.launch()
  const page = await browser.newPage()
  await page.emulate({ viewport: { width: 1440, height: 900 }, userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' })
  await page.goto('http://localhost:8000')
  await page.waitFor(2000)
  await page.screenshot({ path: 'screenshots/initial.png' })

  browser.close()
})()
`
export const backendWithFrontendScreenshotsTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const backendWithFrontendSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendSrcIndexTs = `function printInConsole (message: any) {
  console.log(message)
}

printInConsole('app started!')

process.on('SIGINT', () => {
  process.exit()
})

process.on('SIGTERM', () => {
  process.exit()
})
`
export const backendWithFrontendSrcTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "outDir": "../dist",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendStaticFile2variableConfigJs = `module.exports = {
  base: 'static',
  files: [
    'static/*.template.html'
  ],
  /**
   * @argument {string} file
   */
  handler: file => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'static/variables.ts'
}
`
export const backendWithFrontendStaticIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="DESCRIPTION">
<title>REPOSITORY_NAME</title>
<%-inline.indexBundleCss %>
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<div id="prerender-container">
<div id="container"><%-PRERENDER %></div>
</div>
<script src="<%=vendorBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vendorBundleJs %>"></script>
<%-inline.indexBundleJs %>
`
export const backendWithFrontendStaticIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
  `
export const backendWithFrontendStaticIndexTemplateHtml = `<div>
</div>`
export const backendWithFrontendStaticIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic
})
class App extends Vue {
}

// tslint:disable-next-line:no-unused-expression
new App({ el: '#container' })
`
export const backendWithFrontendStaticPrerenderHtml = ``
export const backendWithFrontendStaticRevStaticConfigJs = `const fs = require('fs')

module.exports = {
  inputFiles: [
    'static/*.bundle.js',
    'static/*.bundle.css',
    'static/*.ejs.html'
  ],
  revisedFiles: [
  ],
  inlinedFiles: [
    'static/*.bundle.js',
    'static/*.bundle.css'
  ],
  outputFiles: file => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (filePath, fileString, md5String, baseName, extensionName) => baseName + '-' + md5String + extensionName,
  base: 'static',
  fileSize: 'static/file-size.json',
  context: {
    prerender: fs.readFileSync('prerender/index.html')
  }
}
`
export const backendWithFrontendStaticSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const backendWithFrontendStaticSpecKarmaConfigJs = `const webpackConfig = require('./webpack.config.js')

process.env.CHROME_BIN = require('puppeteer').executablePath()

module.exports = function (karma) {
  const config = {
    basePath: '',
    frameworks: ['jasmine'],
    files: [
      '**/*Spec.js'
    ],
    reporters: ['progress'],
    port: 9876,
    colors: true,
    logLevel: karma.LOG_INFO,
    autoWatch: true,
    browsers: ['ChromeHeadless'],
    singleRun: true,
    concurrency: Infinity,
    webpack: webpackConfig,
    preprocessors: {
      '**/*Spec.js': ['webpack']
    }
  }

  if (!process.env.APPVEYOR) {
    config.browsers.push('Firefox')
  }

  karma.set(config)
}
`
export const backendWithFrontendStaticSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendStaticSpecWebpackConfigJs = `const webpack = require('webpack')

module.exports = {
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    new webpack.NoEmitOnErrorsPlugin()
  ]
}
`
export const backendWithFrontendStaticTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const backendWithFrontendStaticVendorTs = `import 'vue'
import 'vue-class-component'
`
export const backendWithFrontendStaticWebpackConfigJs = `const webpack = require('webpack')

const plugins = [
  new webpack.DefinePlugin({
    'process.env': {
      'NODE_ENV': JSON.stringify('production')
    }
  }),
  new webpack.NoEmitOnErrorsPlugin(),
  new webpack.optimize.UglifyJsPlugin({
    output: {
      comments: false
    },
    exclude: [
    ]
  }),
  new webpack.optimize.CommonsChunkPlugin({
    name: ['index', 'vendor']
  })
]

module.exports = {
  entry: {
    index: './static/index',
    vendor: './static/vendor'
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  },
  plugins
}
`
export const backendWithFrontendStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const backendWithFrontendTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const cliAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const cliBinCli = `#!/usr/bin/env node
require("../dist/index.js");
`
export const cliCleanReleaseConfigJs = `module.exports = {
  include: [
    'bin/*',
    'dist/*',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  changesGitStaged: true,
  postScript: [
    'npm publish "[dir]" --access public',
    'git add package.json',
    'git commit -m "v[version]"',
    'git tag v[version]',
    'git push',
    'git push origin v[version]'
  ]
}
`
export const cliCleanScriptsConfigJs = `const { checkGitStatus } = require('clean-scripts')

const tsFiles = \`"src/**/*.ts" "spec/**/*.ts"\`
const jsFiles = \`"*.config.js"\`

module.exports = {
  build: [
    'rimraf dist/',
    'tsc -p src/',
    'node dist/index.js --supressError > spec/result.txt'
  ],
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    export: \`no-unused-export \${tsFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: [
    'tsc -p spec',
    'jasmine',
    () => checkGitStatus()
  ],
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`
  }
}
`
export const cliGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const cliReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)

## install

\`yarn global add REPOSITORY_NAME\`

## usage

run \`REPOSITORY_NAME\`
`
export const cliSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const cliSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const cliSrcIndexTs = `import * as minimist from 'minimist'
import * as packageJson from '../package.json'

let suppressError = false

function showToolVersion () {
  console.log(\`Version: \${packageJson.version}\`)
}

async function executeCommandLine () {
  const argv = minimist(process.argv.slice(2), { '--': true })

  const showVersion = argv.v || argv.version
  if (showVersion) {
    showToolVersion()
    return
  }

  suppressError = argv.suppressError

  // todo
}

executeCommandLine().then(() => {
  console.log(\`REPOSITORY_NAME success.\`)
}, error => {
  if (error instanceof Error) {
    console.log(error.message)
  } else {
    console.log(error)
  }
  if (!suppressError) {
    process.exit(1)
  }
})
`
export const cliSrcLibDTs = `declare module '*.json' {
  export const version: string
}
`
export const cliSrcTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "outDir": "../dist",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "newLine": "LF"
  }
}`
export const cliTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const electronAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const electronBrowserslistrc = `last 2 Chrome versions
`
export const electronCleanReleaseConfigJs = `const { name, devDependencies: { electron: electronVersion } } = require('./package.json')

module.exports = {
  include: [
    'main.js',
    'scripts/index.css',
    'scripts/index.js',
    'scripts/index.html',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  changesGitStaged: true,
  postScript: [
    'git add package.json',
    'git commit -m "v[version]"',
    'git tag v[version]',
    'git push',
    'git push origin v[version]',
    'cd "[dir]" && npm i --production',
    'prune-node-modules "[dir]/node_modules"',
    \`electron-packager "[dir]" "\${name}" --out=dist --arch=x64 --electron-version=\${electronVersion} --platform=darwin --ignore="dist/"\`,
    \`electron-packager "[dir]" "\${name}" --out=dist --arch=x64 --electron-version=\${electronVersion} --platform=win32 --ignore="dist/"\`,
    \`7z a -r -tzip dist/\${name}-darwin-x64-[version].zip dist/\${name}-darwin-x64/\`,
    \`7z a -r -tzip dist/\${name}-win32-x64-\$[version].zip dist/\${name}-win32-x64/\`,
    \`electron-installer-windows --src dist/\${name}-win32-x64/ --dest dist/\`,
    \`cd dist && create-dmg \${name}-darwin-x64/\${name}.app\`
  ]
}
`
export const electronCleanScriptsConfigJs = `const { checkGitStatus, executeScriptAsync } = require('clean-scripts')
const { watch } = require('watch-then-execute')

const tsFiles = \`"src/**/*.ts" "scripts/**/*.ts" "spec/**/*.ts" "static_spec/**/*.ts"\`
const jsFiles = \`"*.config.js" "scripts/**/*.config.js" "static_spec/**/*.config.js"\`
const lessFiles = \`"scripts/**/*.less"\`

const templateCommand = 'file2variable-cli --config scripts/file2variable.config.js'
const tscScriptsCommand = 'tsc -p scripts/'
const webpackCommand = 'webpack --config scripts/webpack.config.js'
const cssCommand = [
  'lessc scripts/index.less > scripts/index.css',
  'postcss scripts/index.css -o scripts/index.postcss.css',
  'cleancss -o scripts/index.bundle.css scripts/index.postcss.css'
]

module.exports = {
  build: {
    back: 'tsc',
    front: {
      js: [
        templateCommand,
        tscScriptsCommand,
        webpackCommand
      ],
      css: cssCommand
    }
  },
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: {
    jasmine: [
      'tsc -p spec',
      'jasmine'
    ],
    karma: [
      'tsc -p static_spec',
      'karma start static_spec/karma.config.js'
    ],
    consistence: () => checkGitStatus()
  },
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    template: \`\${templateCommand} --watch\`,
    script: \`\${tscScriptsCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['scripts/**/*.less'], [], () => executeScriptAsync(cssCommand))
  }
}
`
export const electronGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const electronIndexHtml = `<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>news fetcher client v1.2.1</title>
    <link rel="stylesheet" href="scripts/index.bundle.css">
</head>

<body>
    <div id="container"></div>
    <script>
        require("./scripts/index.bundle.js");
    </script>
</body>

</html>`
export const electronMainTs = `import * as electron from 'electron'

let mainWindow: Electron.BrowserWindow | undefined

electron.app.on('window-all-closed', () => {
  electron.app.quit()
})

electron.app.on('ready', () => {
  mainWindow = new electron.BrowserWindow({ width: 1200, height: 800 })
  mainWindow.loadURL(\`file://\${__dirname}/index.html\`)
  mainWindow.on('closed', () => {
    mainWindow = undefined
  })
  // mainWindow.webContents.openDevTools();
})
`
export const electronPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const electronReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
`
export const electronScriptsFile2variableConfigJs = `module.exports = {
  base: 'scripts',
  files: [
    'scripts/index.template.html'
  ],
  /**
   * @argument {string} file
   */
  handler: file => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'scripts/variables.ts'
}
`
export const electronScriptsIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
  `
export const electronScriptsIndexTemplateHtml = `<div>
</div>`
export const electronScriptsIndexTs = `// import * as electron from "electron";
import Vue from 'vue'
import Component from 'vue-class-component'
import { scriptsIndexTemplateHtml, scriptsIndexTemplateHtmlStatic } from './variables'

@Component({
  render: scriptsIndexTemplateHtml,
  staticRenderFns: scriptsIndexTemplateHtmlStatic
})
class App extends Vue {
}

// tslint:disable-next-line:no-unused-expression
new App({ el: '#container' })
`
export const electronScriptsTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const electronScriptsWebpackConfigJs = `const webpack = require('webpack')

module.exports = {
  entry: {
    index: './scripts/index'
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  },
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    new webpack.NoEmitOnErrorsPlugin(),
    new webpack.optimize.UglifyJsPlugin({
      output: {
        comments: false
      },
      exclude: [
      ]
    })
  ]
}
`
export const electronSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const electronSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const electronStaticSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const electronStaticSpecKarmaConfigJs = `const webpackConfig = require('./webpack.config.js')

process.env.CHROME_BIN = require('puppeteer').executablePath()

module.exports = function (karma) {
  const config = {
    basePath: '',
    frameworks: ['jasmine'],
    files: [
      '**/*Spec.js'
    ],
    reporters: ['progress'],
    port: 9876,
    colors: true,
    logLevel: karma.LOG_INFO,
    autoWatch: true,
    browsers: ['ChromeHeadless'],
    singleRun: true,
    concurrency: Infinity,
    webpack: webpackConfig,
    preprocessors: {
      '**/*Spec.js': ['webpack']
    }
  }

  if (!process.env.APPVEYOR) {
    config.browsers.push('Firefox')
  }

  karma.set(config)
}
`
export const electronStaticSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const electronStaticSpecWebpackConfigJs = `const webpack = require('webpack')

module.exports = {
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    new webpack.NoEmitOnErrorsPlugin()
  ]
}
`
export const electronStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const electronTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const electronTsconfigJson = `{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "newLine": "LF"
  },
  "exclude": [
    "scripts/",
    "node_modules/"
  ]
}`
export const frontendAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const frontendBrowserslistrc = `last 2 Chrome versions
`
export const frontendCleanScriptsConfigJs = `const { Service, checkGitStatus, executeScriptAsync } = require('clean-scripts')
const { watch } = require('watch-then-execute')

const tsFiles = \`"*.ts" "spec/**/*.ts" "screenshots/**/*.ts" "prerender/**/*.ts"\`
const jsFiles = \`"*.config.js" "spec/**/*.config.js"\`
const lessFiles = \`"*.less"\`

const templateCommand = 'file2variable-cli --config file2variable.config.js'
const tscCommand = 'tsc'
const webpackCommand = 'webpack'
const revStaticCommand = 'rev-static'
const cssCommand = [
  'lessc index.less > index.css',
  'postcss index.css -o index.postcss.css',
  'cleancss -o index.bundle.css index.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css'
]
const swCommand = [
  'sw-precache --config sw-precache.config.js --verbose',
  'uglifyjs service-worker.js -o service-worker.bundle.js'
]

module.exports = {
  build: [
    {
      js: [
        templateCommand,
        tscCommand,
        webpackCommand
      ],
      css: cssCommand,
      clean: 'rimraf **/*.bundle-*.js *.bundle-*.css'
    },
    revStaticCommand,
    swCommand
  ],
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: [
    'tsc -p spec',
    'karma start spec/karma.config.js',
    () => checkGitStatus()
  ],
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    template: \`\${templateCommand} --watch\`,
    tsc: \`\${tscCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`,
    sw: () => watch(['vendor.bundle-*.js', 'index.html'], [], () => executeScriptAsync(swCommand))
  },
  screenshot: [
    new Service('http-server -p 8000'),
    'tsc -p screenshots',
    'node screenshots/index.js'
  ],
  prerender: [
    new Service('http-server -p 8000'),
    'tsc -p prerender',
    'node prerender/index.js',
    revStaticCommand,
    swCommand
  ]
}
`
export const frontendFile2variableConfigJs = `module.exports = {
  files: [
    '*.template.html'
  ],
  /**
   * @argument {string} file
   */
  handler: file => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'variables.ts'
}
`
export const frontendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const frontendIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="DESCRIPTION">
<title>REPOSITORY_NAME</title>
<%-inline.indexBundleCss %>
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<div id="prerender-container">
<div id="container"><%-context.prerender %></div>
</div>
<script src="<%=vendorBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vendorBundleJs %>"></script>
<%-inline.indexBundleJs %>
`
export const frontendIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
  `
export const frontendIndexTemplateHtml = `<div>
</div>`
export const frontendIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic
})
class App extends Vue {
}

// tslint:disable-next-line:no-unused-expression
new App({ el: '#container' })
`
export const frontendPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const frontendPrerenderHtml = ``
export const frontendPrerenderIndexHtml = ``
export const frontendPrerenderIndexTs = `import * as puppeteer from 'puppeteer'
import * as fs from 'fs'

(async () => {
  const browser = await puppeteer.launch()
  const page = await browser.newPage()
  await page.emulate({ viewport: { width: 1440, height: 900 }, userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' })
  await page.waitFor(1000)
  await page.goto('http://localhost:8000')
  await page.waitFor(2000)
  const content = await page.evaluate(() => {
    const element = document.querySelector('#prerender-container')
    return element ? element.innerHTML.trim() : ''
  })
  fs.writeFileSync('prerender/index.html', content)

  browser.close()
})()
`
export const frontendPrerenderTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const frontendReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
`
export const frontendRevStaticConfigJs = `const fs = require('fs')

module.exports = {
  inputFiles: [
    '*.bundle.js',
    '*.bundle.css',
    '*.ejs.html'
  ],
  excludeFiles: [
    'service-worker.bundle.js'
  ],
  revisedFiles: [
  ],
  inlinedFiles: [
    'index.bundle.js',
    'index.bundle.css'
  ],
  outputFiles: file => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (filePath, fileString, md5String, baseName, extensionName) => baseName + '-' + md5String + extensionName,
  fileSize: 'file-size.json',
  context: {
    prerender: fs.readFileSync('prerender/index.html')
  }
}
`
export const frontendScreenshotsIndexTs = `import * as puppeteer from 'puppeteer'

(async () => {
  const browser = await puppeteer.launch()
  const page = await browser.newPage()
  await page.emulate({ viewport: { width: 1440, height: 900 }, userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' })
  await page.goto('http://localhost:8000')
  await page.waitFor(2000)
  await page.screenshot({ path: 'screenshots/initial.png' })

  browser.close()
})()
`
export const frontendScreenshotsTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const frontendSpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const frontendSpecKarmaConfigJs = `const webpackConfig = require('./webpack.config.js')

process.env.CHROME_BIN = require('puppeteer').executablePath()

module.exports = function (karma) {
  const config = {
    basePath: '',
    frameworks: ['jasmine'],
    files: [
      '**/*Spec.js'
    ],
    reporters: ['progress'],
    port: 9876,
    colors: true,
    logLevel: karma.LOG_INFO,
    autoWatch: true,
    browsers: ['ChromeHeadless'],
    singleRun: true,
    concurrency: Infinity,
    webpack: webpackConfig,
    preprocessors: {
      '**/*Spec.js': ['webpack']
    }
  }

  if (!process.env.APPVEYOR) {
    config.browsers.push('Firefox')
  }

  karma.set(config)
}
`
export const frontendSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const frontendSpecWebpackConfigJs = `const webpack = require('webpack')

module.exports = {
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    new webpack.NoEmitOnErrorsPlugin()
  ]
}
`
export const frontendStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const frontendSwPrecacheConfigJs = `module.exports = {
  staticFileGlobs: [
    'index.html',
    'vendor.bundle-*.js'
  ]
}
`
export const frontendTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const frontendTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  },
  "files": [
    "index.ts",
    "variables.ts",
    "vendor.ts"
  ]
}`
export const frontendVendorTs = `import 'vue'
import 'vue-class-component'
`
export const frontendWebpackConfigJs = `const webpack = require('webpack')

const plugins = [
  new webpack.DefinePlugin({
    'process.env': {
      'NODE_ENV': JSON.stringify('production')
    }
  }),
  new webpack.NoEmitOnErrorsPlugin(),
  new webpack.optimize.UglifyJsPlugin({
    output: {
      comments: false
    },
    exclude: [
    ]
  }),
  new webpack.optimize.CommonsChunkPlugin({
    name: ['index', 'vendor']
  })
]

module.exports = {
  entry: {
    index: './index',
    vendor: './vendor'
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  },
  plugins
}
`
export const libraryAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const libraryCleanReleaseConfigJs = `module.exports = {
  include: [
    'dist/**/*',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  base: 'dist',
  askVersion: true,
  changesGitStaged: true,
  postScript: [
    'npm publish "[dir]" --access public',
    'git add package.json',
    'git commit -m "v[version]"',
    'git tag v[version]',
    'git push',
    'git push origin v[version]'
  ]
}
`
export const libraryCleanScriptsConfigJs = `const { checkGitStatus } = require('clean-scripts')

const tsFiles = \`"src/**/*.ts" "spec/**/*.ts"\`
const jsFiles = \`"*.config.js"\`

module.exports = {
  build: [
    'rimraf dist/',
    {
      back: 'tsc -p src/tsconfig.nodejs.json',
      all: 'tsc -p src/tsconfig.base.json',
      front: [
        'tsc -p src/tsconfig.browser.json',
        'rollup --config rollup.config.js'
      ]
    }
  ],
  lint: {
    ts: \`tslint \${tsFiles}\`,
    js: \`standard \${jsFiles}\`,
    export: \`no-unused-export \${tsFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: [
    'tsc -p spec',
    'jasmine',
    () => checkGitStatus()
  ],
  fix: {
    ts: \`tslint --fix \${tsFiles}\`,
    js: \`standard --fix \${jsFiles}\`
  }
}
`
export const libraryGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const libraryReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)

## install

\`yarn add REPOSITORY_NAME\`

## usage

\`\`\`ts
import ComponentTypeName from "REPOSITORY_NAME";
// <script src="./node_modules/REPOSITORY_NAME/REPOSITORY_NAME.min.js"></script>
\`\`\`
`
export const libraryRollupConfigJs = `import uglify from 'rollup-plugin-uglify'
import resolve from 'rollup-plugin-node-resolve'

export default {
  input: 'dist/browser/index.js',
  name: 'ComponentTypeName',
  plugins: [resolve(), uglify()],
  output: {
    file: 'dist/ComponentTypeName.min.js',
    format: 'umd'
  }
}
`
export const librarySpecIndexSpecTs = `it('', () => {
  // expect(true).toEqual(true);
})
`
export const librarySpecTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const librarySrcIndexTs = `/**
 * @public
 */
export default class ComponentTypeName {
}
`
export const librarySrcTsconfigBaseJson = `{
  "compilerOptions": {
    "target": "es5",
    "declaration": true,
    "outDir": "../dist",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "newLine": "LF"
  }
}`
export const librarySrcTsconfigBrowserJson = `{
  "extends": "./tsconfig.base.json",
  "compilerOptions": {
    "outDir": "../dist/browser",
    "module": "esnext",
    "moduleResolution": "node",
    "newLine": "LF"
  }
}`
export const librarySrcTsconfigNodejsJson = `{
  "extends": "./tsconfig.base.json",
  "compilerOptions": {
    "target": "esnext",
    "outDir": "../dist/nodejs",
    "newLine": "LF"
  }
}`
export const libraryTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const uiComponentAppveyorYml = `environment:
  nodejs_version: "8"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const uiComponentBrowserslistrc = `last 2 Chrome versions
`
export const uiComponentCleanScriptsConfigJs = `const { Service, checkGitStatus, executeScriptAsync } = require('clean-scripts')
const { watch } = require('watch-then-execute')

const tsFiles = \`"packages/@(core|vue|react|angular)/@(src|demo)/**/*.@(ts|tsx)" "spec/**/*.ts" "screenshots/**/*.ts"\`
const lessFiles = \`"packages/core/src/**/*.less"\`
const jsFiles = \`"*.config.js" "spec/**/*.config.js"\`
const excludeTsFiles = \`"packages/@(core|vue|react|angular)/@(src|demo)/**/*.d.ts"\`

const vueTemplateCommand = \`file2variable-cli --config packages/vue/src/file2variable.config.js\`
const angularTemplateCommand = \`file2variable-cli packages/angular/src/*.template.html -o packages/angular/src/variables.ts --html-minify --base packages/angular/src\`
const tscSrcCommand = [
  \`ngc -p packages/core/src\`,
  \`tsc -p packages/vue/src\`,
  \`tsc -p packages/react/src\`,
  \`ngc -p packages/angular/src\`
]
const tscDemoCommand = [
  \`ngc -p packages/core/demo\`,
  \`tsc -p packages/vue/demo\`,
  \`tsc -p packages/react/demo\`,
  \`ngc -p packages/angular/demo\`
]
const webpackCommand = \`webpack\`
const revStaticCommand = \`rev-static\`
const cssCommand = [
  \`lessc packages/core/src/index.less -sm=on > packages/core/src/index.css\`,
  \`postcss packages/core/src/index.css -o packages/core/dist/COMPONENT_SHORT_NAME.css\`,
  \`cleancss packages/core/dist/COMPONENT_SHORT_NAME.css -o packages/core/dist/COMPONENT_SHORT_NAME.min.css\`,
  \`cleancss packages/core/dist/COMPONENT_SHORT_NAME.min.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css -o packages/core/demo/index.bundle.css\`
]

module.exports = {
  build: [
    {
      js: [
        vueTemplateCommand,
        angularTemplateCommand,
        tscSrcCommand,
        tscDemoCommand,
        webpackCommand
      ],
      css: cssCommand,
      clean: \`rimraf "packages/@(core|vue|react|angular)/demo/**/@(*.bundle-*.js|*.bundle-*.css)"\`
    },
    revStaticCommand
  ],
  lint: {
    ts: \`tslint \${tsFiles} --exclude \${excludeTsFiles}\`,
    js: \`standard \${jsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles} --exclude \${excludeTsFiles}\`,
    commit: \`commitlint --from=HEAD~1\`,
    markdown: \`markdownlint README.md\`
  },
  test: [
    'tsc -p spec',
    'karma start spec/karma.config.js',
    () => checkGitStatus()
  ],
  fix: {
    ts: \`tslint --fix \${tsFiles} --exclude \${excludeTsFiles}\`,
    js: \`standard --fix \${jsFiles}\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    vue: \`\${vueTemplateCommand} --watch\`,
    angular: \`\${angularTemplateCommand} --watch\`,
    src: \`\${tscSrcCommand} --watch\`,
    demo: \`\${tscDemoCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['src/**/*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`
  },
  screenshot: [
    new Service('http-server -p 8000'),
    'tsc -p screenshots',
    'node screenshots/index.js'
  ]
}
`
export const uiComponentGitignore = `# Source
.vscode
dist
**/demo/**/*.metadata.json
**/demo/**/*.ngsummary.json
**/demo/**/*.d.ts
*.js
*.css
!*.config.js
!**/*-*.js
!**/*-*.css
!**/*.index.bundle.js
`
export const uiComponentPackagesAngularDemoAotIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<app></app>
<script src="./<%=angularDemoAotIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.angularDemoAotIndexBundleJs %>"></script>
`
export const uiComponentPackagesAngularDemoAotIndexTs = `import 'core-js/es6'
import 'core-js/es7/reflect'
import 'zone.js/dist/zone'

import { platformBrowser } from '@angular/platform-browser'
import { enableProdMode } from '@angular/core'

import { MainModuleNgFactory } from '../main.module.ngfactory'

enableProdMode()

platformBrowser().bootstrapModuleFactory(MainModuleNgFactory)
`
export const uiComponentPackagesAngularDemoJitIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<app></app>
<script src="./<%=angularDemoJitIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.angularDemoJitIndexBundleJs %>"></script>
`
export const uiComponentPackagesAngularDemoJitIndexTs = `import 'core-js/es6'
import 'core-js/es7/reflect'
import 'zone.js/dist/zone'

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'
import { enableProdMode } from '@angular/core'

import { MainModule } from '../main.module'

enableProdMode()

platformBrowserDynamic().bootstrapModule(MainModule)
`
export const uiComponentPackagesAngularDemoMainComponentTs = `import { Component } from '@angular/core'

import { COMPONENT_TYPE_NAMEData } from '../dist/'

@Component({
  selector: 'app',
  template: \`
    <div>
        <a href="https://github.com/AUTHOR/REPOSITORY_NAME/tree/master/packages/angular/demo" target="_blank">the source code of the demo</a>
        <br/>
        <COMPONENT_SHORT_NAME [data]="data">
        </COMPONENT_SHORT_NAME>
    </div>
    \`
})
export class MainComponent {
  data: COMPONENT_TYPE_NAME
}
`
export const uiComponentPackagesAngularDemoMainModuleTs = `import { NgModule } from '@angular/core'
import { BrowserModule } from '@angular/platform-browser'
import { FormsModule } from '@angular/forms'

import { COMPONENT_TYPE_NAMEModule } from '../dist/'
import { MainComponent } from './main.component'

@NgModule({
  imports: [BrowserModule, FormsModule, COMPONENT_TYPE_NAMEModule],
  declarations: [MainComponent],
  bootstrap: [MainComponent]
})
export class MainModule { }
`
export const uiComponentPackagesAngularDemoTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "angularCompilerOptions": {
    "strictMetadataEmit": true
  },
  "compilerOptions": {
    "declaration": false
  }
}`
export const uiComponentPackagesAngularPackageJson = `{
  "name": "component-short-name-angular-component",
  "version": "1.0.0",
  "description": "DESCRIPTION",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AUTHOR/REPOSITORY_NAME.git"
  },
  "author": "AUTHOR_NAME",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/REPOSITORY_NAME/issues"
  },
  "homepage": "https://github.com/AUTHOR/REPOSITORY_NAME#readme",
  "files": [
    "dist"
  ],
  "dependencies": {
    "@angular/common": "5",
    "@angular/core": "5",
    "@angular/forms": "5",
    "REPOSITORY_NAME": "^1.0.0"
  },
  "devDependencies": {
    "@angular/platform-browser": "5.0.3",
    "@angular/platform-browser-dynamic": "5.0.3",
    "core-js": "2.5.1",
    "rxjs": "5.5.2",
    "zone.js": "0.8.18"
  },
  "peerDependencies": {
    "@angular/common": "5",
    "@angular/core": "5",
    "@angular/forms": "5",
    "REPOSITORY_NAME": "^1.0.0"
  }
}`
export const uiComponentPackagesAngularSrcIndexComponentTs = `import { Component, Input } from '@angular/core'
import * as common from 'REPOSITORY_NAME'
import { indexTemplateHtml } from './variables'

/**
 * @public
 */
@Component({
  selector: 'COMPONENT_SHORT_NAME',
  template: indexTemplateHtml
})
export class ComponentTypeNameComponent {
  @Input()
  data: common.ComponentTypeNameData
}
`
export const uiComponentPackagesAngularSrcIndexTemplateHtml = `<div class="COMPONENT_SHORT_NAME"></div>`
export const uiComponentPackagesAngularSrcIndexTs = `import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { ComponentTypeNameComponent } from './index.component'
export * from './index.component'
export * from 'REPOSITORY_NAME'

/**
 * @public
 */
@NgModule({
  declarations: [
    ComponentTypeNameComponent
  ],
  imports: [
    CommonModule
  ],
  exports: [
    ComponentTypeNameComponent
  ]
})
export class ComponentTypeNameModule { }
`
export const uiComponentPackagesAngularSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "angularCompilerOptions": {
    "strictMetadataEmit": true
  },
  "compilerOptions": {
    "outDir": "../dist",
    "rootDir": "."
  }
}`
export const uiComponentPackagesCoreDemoIndexTs = ``
export const uiComponentPackagesCoreDemoTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "angularCompilerOptions": {
    "strictMetadataEmit": true
  },
  "compilerOptions": {
    "declaration": false
  }
}`
export const uiComponentPackagesCorePackageJson = `{
    "name": "repository-name",
    "version": "1.0.0",
    "description": "DESCRIPTION",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/AUTHOR/repository-name.git"
    },
    "author": "AUTHOR_NAME",
    "license": "MIT",
    "bugs": {
        "url": "https://github.com/AUTHOR/repository-name/issues"
    },
    "homepage": "https://github.com/AUTHOR/repository-name#readme",
    "files": [
        "dist"
    ],
    "dependencies": {
        "tslib": "1"
    },
    "peerDependencies": {
        "tslib": "1"
    }
}`
export const uiComponentPackagesCoreSrcIndexLess = `.componentShortName {
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
    -webkit-font-smoothing: antialiased;
  }
}
  `
export const uiComponentPackagesCoreSrcIndexTs = `/**
 * @public
 */
export type componentTypeNameData<T = any> = {
  component: string | Function;
  data: T;
}
`
export const uiComponentPackagesCoreSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "angularCompilerOptions": {
    "strictMetadataEmit": true
  },
  "compilerOptions": {
    "outDir": "../dist"
  }
}`
export const uiComponentPackagesReactDemoIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<div id="container"></div>
<script src="./<%=reactDemoIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.reactDemoIndexBundleJs %>"></script>
`
export const uiComponentPackagesReactDemoIndexTsx = `import * as React from 'react'
import * as ReactDOM from 'react-dom'
import { componentTypeName, componentTypeNameData } from '../dist/'

class Main extends React.Component<{}, {}> {
  private data: componentTypeNameData

  render () {
    return (
      <div>
        <a href='https://github.com/AUTHOR/REPOSITORY_NAME/tree/master/packages/react/demo' target='_blank'>the source code of the demo</a>
        <br />
        <componentTypeName data={this.data}>
        </componentTypeName>
      </div>
    )
  }
}

ReactDOM.render(<Main />, document.getElementById('container'))
`
export const uiComponentPackagesReactDemoTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": false
  }
}`
export const uiComponentPackagesReactPackageJson = `{
  "name": "component-short-name-react-component",
  "version": "1.0.0",
  "description": "DESCRIPTION",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AUTHOR/REPOSITORY_NAME.git"
  },
  "author": "AUTHOR",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/REPOSITORY_NAME/issues"
  },
  "homepage": "https://github.com/AUTHOR/REPOSITORY_NAME#readme",
  "files": [
    "dist"
  ],
  "dependencies": {
    "react": "16",
    "react-dom": "16",
    "REPOSITORY_NAME": "^1.0.0"
  },
  "devDependencies": {
    "@types/react": "16.0.25",
    "@types/react-dom": "16.0.3"
  },
  "peerDependencies": {
    "react": "16",
    "react-dom": "16",
    "REPOSITORY_NAME": "^1.0.0"
  }
}`
export const uiComponentPackagesReactSrcIndexTsx = `import * as React from 'react'
import * as common from 'REPOSITORY_NAME'
export * from 'REPOSITORY_NAME'

/**
 * @public
 */
export class ComponentTypeName extends React.Component<{
  data: common.ComponentTypeNameData;
}, {}> {
  render () {
    return (
      <div className='COMPONENT_SHORT_NAME'>
      </div>
    )
  }
}
`
export const uiComponentPackagesReactSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist"
  }
}`
export const uiComponentPackagesTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "declaration": true,
    "lib": [
      "dom",
      "es5",
      "es2015.promise"
    ],
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "emitDecoratorMetadata": true,
    "newLine": "LF"
  }
}`
export const uiComponentPackagesVueDemoIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<div id="container"></div>
<script src="./<%=vueDemoIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vueDemoIndexBundleJs %>"></script>
`
export const uiComponentPackagesVueDemoIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
// tslint:disable:no-duplicate-imports
import '../dist/'
import { componentTypeNameData } from '../dist/'

@Component({
  template: \`
    <div>
        <a href="https://github.com/AUTHOR/REPSOTIRY_NAME/tree/master/packages/vue/demo" target="_blank">the source code of the demo</a>
        <br/>
        <componentShortName :data="data">
        </componentShortName>
    </div>
    \`
})
class App extends Vue {
  data: componentTypeNameData
}

// tslint:disable-next-line:no-unused-expression
new App({ el: '#container' })
`
export const uiComponentPackagesVueDemoTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "declaration": false
  }
}`
export const uiComponentPackagesVuePackageJson = `{
  "name": "component-short-name-vue-component",
  "version": "1.0.0",
  "description": "DESCRIPTION",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AUTHOR/REPOSITORY_NAME.git"
  },
  "author": "AUTHOR_NAME",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/REPOSITORY_NAME/issues"
  },
  "homepage": "https://github.com/AUTHOR/REPOSITORY_NAME#readme",
  "files": [
    "dist"
  ],
  "dependencies": {
    "vue": "2",
    "vue-class-component": "6",
    "REPOSITORY_NAME": "^1.0.0"
  },
  "peerDependencies": {
    "vue": "2",
    "vue-class-component": "6",
    "REPOSITORY_NAME": "^1.0.0"
  }
}`
export const uiComponentPackagesVueSrcFile2variableConfigJs = `module.exports = {
  base: 'packages/vue/src/',
  files: [
    'packages/vue/src/*.template.html'
  ],
  /**
   * @argument {string} file
   */
  handler: file => {
    return {
      type: 'vue',
      name: 'COMPONENT_TYPE_NAME',
      path: './index'
    }
  },
  out: 'packages/vue/src/variables.ts'
}
`
export const uiComponentPackagesVueSrcIndexTemplateHtml = `<div class="componentShortName"></div>`
export const uiComponentPackagesVueSrcIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import * as common from 'REPOSITORY_NAME'
export * from 'REPOSITORY_NAME'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic,
  props: ['data']
})
class ComponentTypeName extends Vue {
  data: common.componentTypeNameData
}

Vue.component('COMPONENT_SHORT_NAME', ComponentTypeName)
`
export const uiComponentPackagesVueSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist"
  }
}`
export const uiComponentPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const uiComponentReadmeMd = `[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)

## features

+ vuejs component
+ reactjs component
+ angular component
+ custom component

## link css

\`\`\`html
<link rel="stylesheet" href="./node_modules/REPOSITORY_NAME/dist/COMPONENT_SHORT_NAME.min.css" />
\`\`\`

## vuejs component

\`yarn add COMPONENT_SHORT_NAME-vue-component\`

\`\`\`ts
import "COMPONENT_SHORT_NAME-vue-component";
\`\`\`

\`\`\`html
<COMPONENT_SHORT_NAME :data="data">
</COMPONENT_SHORT_NAME>
\`\`\`

the online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/vue/demo>

## reactjs component

\`yarn add COMPONENT_SHORT_NAME-react-component\`

\`\`\`ts
import { COMPONENT_TYPE_NAME } from "COMPONENT_SHORT_NAME-react-component";
\`\`\`

\`\`\`jsx
<COMPONENT_TYPE_NAME data={this.data}>
</COMPONENT_TYPE_NAME>
\`\`\`

the online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/react/demo>

## angular component

\`yarn add COMPONENT_SHORT_NAME-angular-component\`

\`\`\`ts
import { COMPONENT_TYPE_NAMEModule } from "COMPONENT_SHORT_NAME-angular-component";

@NgModule({
    imports: [BrowserModule, FormsModule, COMPONENT_TYPE_NAMEModule],
    declarations: [MainComponent],
    bootstrap: [MainComponent],
})
class MainModule { }
\`\`\`

\`\`\`html
<COMPONENT_SHORT_NAME [data]="data">
</COMPONENT_SHORT_NAME>
\`\`\`

the online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/angular/demo/jit>

the AOT online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/angular/demo/aot>

## properties and events of the component

name | type | description
--- | --- | ---
data | [COMPONENT_TYPE_NAMEData](#COMPONENT_SHORT_NAME-data-structure)[] | the data of the COMPONENT_SHORT_NAME

## COMPONENT_SHORT_NAME data structure

\`\`\`ts
type COMPONENT_TYPE_NAMEData<T = any> = {
    component: string | Function; // the item component, for vuejs, it is the component name, for reactjs, it is the class object
    data: T; // the data will be passed to the component as \`data\` props
};
\`\`\`
`
export const uiComponentRevStaticConfigJs = `module.exports = {
  inputFiles: [
    'packages/@(vue|react|angular)/demo/**/index.bundle.js',
    'packages/@(vue|react|angular)/demo/**/*.ejs.html',
    'packages/core/demo/*.bundle.css'
  ],
  revisedFiles: [
  ],
  outputFiles: file => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (filePath, fileString, md5String, baseName, extensionName) => baseName + '-' + md5String + extensionName,
  base: 'packages',
  fileSize: 'file-size.json'
}
`
export const uiComponentScreenshotsIndexTs = `import * as puppeteer from 'puppeteer'

(async () => {
  const browser = await puppeteer.launch()
  const page = await browser.newPage()
  await page.emulate({ viewport: { width: 1440, height: 900 }, userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' })

  const cases = [
    { type: 'vue', url: '/packages/vue/demo' },
    { type: 'react', url: '/packages/react/demo' },
    { type: 'angular', url: '/packages/angular/demo/jit' },
    { type: 'aot', url: '/packages/angular/demo/aot' }
  ]

  for (const { type, url } of cases) {
    await page.goto(\`http://localhost:8000\${url}\`)
    await page.screenshot({ path: \`screenshots/\${type}-initial.png\` })
  }

  browser.close()
})()
`
export const uiComponentScreenshotsTsconfigJson = `{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "newLine": "LF"
  }
}`
export const uiComponentSpecIndexSpecTs = `import '../packages/core/dist'

it('', () => {
  // expect(true).toEqual(true);
})
`
export const uiComponentSpecKarmaConfigJs = `const webpackConfig = require('./webpack.config.js')

process.env.CHROME_BIN = require('puppeteer').executablePath()

module.exports = function (karma) {
  const config = {
    basePath: '',
    frameworks: ['jasmine'],
    files: [
      '**/*Spec.js'
    ],
    reporters: ['progress'],
    port: 9876,
    colors: true,
    logLevel: karma.LOG_INFO,
    autoWatch: true,
    browsers: ['ChromeHeadless'],
    singleRun: true,
    concurrency: Infinity,
    webpack: webpackConfig,
    preprocessors: {
      '**/*Spec.js': ['webpack']
    }
  }

  if (!process.env.APPVEYOR) {
    config.browsers.push('Firefox')
  }

  karma.set(config)
}
`
export const uiComponentSpecReactSpecTsx = `import React from 'react'
import { COMPONENT_TYPE_NAME } from '../packages/react/dist'

import renderer from 'react-test-renderer'

it('renders without crashing', () => {
  const app = renderer.create(<COMPONENT_TYPE_NAME data={undefined} />)
  const rendered = app.toJSON()
  expect(rendered).toBeTruthy()
  app.unmount()
})
`
export const uiComponentSpecTsconfigJson = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noImplicitReturns": true,
    "skipLibCheck": true,
    "importHelpers": true,
    "jsx": "react",
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "emitDecoratorMetadata": true,
    "newLine": "LF"
  }
}`
export const uiComponentSpecVueSpecTsx = `import { COMPONENT_TYPE_NAME } from '../packages/vue/dist'

import { mount } from 'vue-test-utils'

it('renders without crashing', () => {
  const app = mount(COMPONENT_TYPE_NAME, {
    propsData: {
      data: undefined
    }
  })
  const rendered = app.html()
  expect(rendered).toBeTruthy()
  app.destroy()
})
`
export const uiComponentSpecWebpackConfigJs = `const webpack = require('webpack')

module.exports = {
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    new webpack.NoEmitOnErrorsPlugin()
  ]
}
`
export const uiComponentStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const uiComponentTravisYml = `language: node_js
dist: trusty
node_js:
  - "8"
before_install:
  - sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const uiComponentWebpackConfigJs = `const webpack = require('webpack')
const path = require('path')

const plugins = [
  new webpack.DefinePlugin({
    'process.env': {
      'NODE_ENV': JSON.stringify('production')
    }
  }),
  new webpack.NoEmitOnErrorsPlugin(),
  new webpack.optimize.UglifyJsPlugin({
    output: {
      comments: false
    },
    exclude: [
    ]
  })
]

const resolve = {
  alias: {
    'vue\$': 'vue/dist/vue.esm.js'
  }
}

module.exports = [
  {
    entry: './packages/vue/demo/index',
    output: {
      path: path.resolve(__dirname, 'packages/vue/demo'),
      filename: 'index.bundle.js'
    },
    plugins,
    resolve
  },
  {
    entry: './packages/react/demo/index',
    output: {
      path: path.resolve(__dirname, 'packages/react/demo'),
      filename: 'index.bundle.js'
    },
    plugins
  },
  {
    entry: './packages/angular/demo/jit/index',
    output: {
      path: path.resolve(__dirname, 'packages/angular/demo/jit'),
      filename: 'index.bundle.js'
    },
    plugins
  },
  {
    entry: './packages/angular/demo/aot/index',
    output: {
      path: path.resolve(__dirname, 'packages/angular/demo/aot'),
      filename: 'index.bundle.js'
    },
    plugins
  }
]
`
// tslint:enable

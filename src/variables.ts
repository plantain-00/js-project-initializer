/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
// tslint:disable
/* eslint-disable */

export const backendAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const backendCleanReleaseConfigTs = `export default {
  include: [
    'dist/*.js',
    'LICENSE',
    'package.json',
    'yarn.lock',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  releaseRepository: 'https://github.com/AUTHOR/REPOSITORY_NAME-release.git',
  postScript: ({ dir, version }) => [
    // \`cd "\${dir}" && rm -rf .git\`,
    // \`cp Dockerfile "\${dir}"\`,
    // \`cd "\${dir}" && docker build -t AUTHOR/REPOSITORY_NAME . && docker push AUTHOR/REPOSITORY_NAME\`
    'git add package.json',
    \`git commit -m "\${version}"\`,
    \`git tag v\${version}\`,
    'git push',
    \`git push origin v\${version}\`,
  ]
}
`
export const backendCleanRunConfigTs = `export default {
  include: [
    'dist/*.js',
    'package.json',
    'yarn.lock'
  ],
  exclude: [
  ],
  postScript: ({ dir }) => [
    \`cd "\${dir}" && yarn --production && node dist/index.js\`
  ]
}
`
export const backendCleanScriptsConfigTs = `import { Program } from 'clean-scripts'

const tsFiles = \`"src/**/*.ts"\`

const tscSrcCommand = 'tsc -p src/'

export default {
  build: [
    'rimraf dist/',
    tscSrcCommand
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    export: \`no-unused-export \${tsFiles} --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p src --strict'
  },
  test: [
    new Program('clean-release --config clean-run.config.ts', 30000)
  ],
  fix: \`eslint --ext .js,.ts \${tsFiles} --fix\`,
  watch: \`\${tscSrcCommand} --watch\`
}
`
export const backendDockerfile = `FROM node:alpine
WORKDIR /app
ADD . /app
RUN apk add --no-cache make gcc g++ python && yarn --production
EXPOSE 8000
CMD ["node","dist/index.js"]
`
export const backendEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const backendEslintignore = `node_modules
*.d.ts
`
export const backendEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const backendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const backendReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## install

\`\`\`bash
git clone https://github.com/AUTHOR/REPOSITORY_NAME-release.git . --depth=1 && yarn add --production
node dist/index.js
\`\`\`

## docker

\`\`\`bash
docker run -d -p 9276:9276 AUTHOR/REPOSITORY_NAME
\`\`\`
`
export const backendSrcIndexTs = `console.log('app started!')

process.on('SIGINT', () => {
  process.exit()
})

process.on('SIGTERM', () => {
  process.exit()
})
`
export const backendSrcTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist",
    "module": "commonjs"
  }
}
`
export const backendTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const backendWithFrontendAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const backendWithFrontendBrowserslistrc = `> 1%
Last 2 versions
`
export const backendWithFrontendCleanReleaseConfigTs = `export default {
  include: [
    'dist/*.js',
    'static/*.bundle-*.js',
    'static/index.html',
    'LICENSE',
    'package.json',
    'yarn.lock',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  releaseRepository: 'https://github.com/AUTHOR/REPOSITORY_NAME-release.git',
  postScript: ({ dir, version }) => [
    // \`cd "\${dir}" && rm -rf .git\`,
    // \`cp Dockerfile "\${dir}"\`,
    // \`cd "\${dir}" && docker build -t AUTHOR/REPOSITORY_NAME . && docker push AUTHOR/REPOSITORY_NAME\`
    'git add package.json',
    \`git commit -m "\${version}"\`,
    \`git tag v\${version}\`,
    'git push',
    \`git push origin v\${version}\`,
  ]
}
`
export const backendWithFrontendCleanRunConfigTs = `export default {
  include: [
    'dist/*.js',
    'package.json',
    'yarn.lock'
  ],
  exclude: [
  ],
  postScript: ({ dir }) => [
    \`cd "\${dir}" && yarn --production && node dist/index.js\`
  ]
}
`
export const backendWithFrontendCleanScriptsConfigTs = `import { executeScriptAsync, Program } from 'clean-scripts'
import { watch } from 'watch-then-execute'

const tsFiles = \`"src/**/*.ts" "static/**/*.ts"\`
const lessFiles = \`"static/**/*.less"\`

const tscSrcCommand = 'tsc -p src/'
const file2variableCommand = 'file2variable-cli --config static/file2variable.config.ts'
const webpackCommand = 'webpack --config static/webpack.config.ts'
const revStaticCommand = 'rev-static --config static/rev-static.config.ts'
const cssCommand = [
  'lessc static/index.less > static/index.css',
  'postcss static/index.css -o static/index.postcss.css',
  'cleancss -o static/index.bundle.css static/index.postcss.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css'
]

export default {
  build: {
    back: [
      'rimraf dist/',
      tscSrcCommand
    ],
    front: [
      {
        js: [
          file2variableCommand,
          webpackCommand
        ],
        css: cssCommand,
        clean: 'rimraf static/**/*.bundle-*.js static/**/*.bundle-*.css'
      },
      revStaticCommand
    ]
  },
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export "src/**/*.ts" --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p src --strict',
    typeCoverageStatic: 'type-coverage -p static --strict --ignore-files "static/variables.ts"'
  },
  test: {
    start: new Program('clean-release --config clean-run.config.js', 30000)
  },
  fix: {
    ts: \`eslint --ext .js,.ts \${tsFiles} --fix\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    back: \`\${tscSrcCommand} --watch\`,
    template: \`\${file2variableCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['static/**/*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`
  }
}
`
export const backendWithFrontendDockerfile = `FROM node:alpine
WORKDIR /app
ADD . /app
RUN apk add --no-cache make gcc g++ python && yarn --production
EXPOSE 8000
CMD ["node","dist/index.js"]
`
export const backendWithFrontendEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const backendWithFrontendEslintignore = `node_modules
*.d.ts
`
export const backendWithFrontendEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const backendWithFrontendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const backendWithFrontendPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const backendWithFrontendReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## install

\`\`\`bash
git clone https://github.com/AUTHOR/REPOSITORY_NAME-release.git . --depth=1 && yarn add --production
\`\`\`

## docker

\`\`\`bash
docker run -d -p 8000:8000 AUTHOR/REPOSITORY_NAME
\`\`\`
`
export const backendWithFrontendSrcIndexTs = `function printInConsole(message: unknown) {
  console.log(message)
}

printInConsole('app started!')

process.on('SIGINT', () => {
  process.exit()
})

process.on('SIGTERM', () => {
  process.exit()
})
`
export const backendWithFrontendSrcTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist",
    "module": "commonjs"
  }
}
`
export const backendWithFrontendStaticFile2VariableConfigTs = `export default {
  base: 'static',
  files: [
    'static/*.template.html'
  ],
  handler: () => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'static/variables.ts'
}
`
export const backendWithFrontendStaticIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="DESCRIPTION">
<title>REPOSITORY_NAME</title>
<%-inline.indexBundleCss %>
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" data-ribbon="Fork me on GitHub" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<div id="prerender-container">
<div id="container"></div>
</div>
<script src="<%=vendorBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vendorBundleJs %>"></script>
<%-inline.indexBundleJs %>
`
export const backendWithFrontendStaticIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
`
export const backendWithFrontendStaticIndexTemplateHtml = `<div>
</div>`
export const backendWithFrontendStaticIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic
})
export class App extends Vue {
}

new App({ el: '#container' })
`
export const backendWithFrontendStaticPrerenderHtml = ``
export const backendWithFrontendStaticRevStaticConfigTs = `export default {
  inputFiles: [
    'static/*.bundle.js',
    'static/*.bundle.css',
    'static/*.ejs.html'
  ],
  revisedFiles: [
  ],
  inlinedFiles: [
    'static/index.bundle.js',
    'static/*.bundle.css'
  ],
  outputFiles: (file: string) => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (_filePath: string, _fileString: string, md5String: string, baseName: string, extensionName: string) => baseName + '-' + md5String + extensionName,
  base: 'static',
  fileSize: 'static/file-size.json'
}
`
export const backendWithFrontendStaticTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "target": "es5"
  }
}
`
export const backendWithFrontendStaticWebpackConfigTs = `import * as webpack from 'webpack'

export default {
  mode: process.env.NODE_ENV || 'production',
  entry: {
    index: './static/index'
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js']
  },
  module: {
    rules: [
      { test: /\\.tsx?\$/, loader: 'ts-loader' }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        commons: {
          test: /[\\\\/]node_modules[\\\\/]/,
          name: 'vendor',
          chunks: 'all'
        }
      }
    }
  }
} as webpack.Configuration
`
export const backendWithFrontendStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const backendWithFrontendTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const cliAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const cliBinCli = `#!/usr/bin/env node
require("../dist/index.js");
`
export const cliCleanReleaseConfigTs = `export default {
  include: [
    'bin/*',
    'dist/*',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  changesGitStaged: true,
  postScript: ({ dir, tag, version }) => [
    tag ? \`npm publish "\${dir}" --access public --tag \${tag}\` : \`npm publish "\${dir}" --access public\`,
    'git add package.json',
    \`git commit -m "\${version}"\`,
    \`git tag -a v\${version} -m 'v\${version}'\`,
    'git push',
    \`git push origin v\${version}\`
  ]
}
`
export const cliCleanRunConfigTs = `export default {
  include: [
    'bin/*',
    'dist/*.js',
    'package.json',
    'yarn.lock'
  ],
  exclude: [
  ],
  postScript: ({ dir }) => [
    \`cd "\${dir}" && yarn --production\`,
    \`node \${dir}/dist/index.js\`
  ]
}
`
export const cliCleanScriptsConfigTs = `import { checkGitStatus } from 'clean-scripts'

const tsFiles = \`"src/**/*.ts"\`

export default {
  build: [
    'rimraf dist/',
    'tsc -p src/',
    'node dist/index.js --supressError > spec/result.txt'
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    export: \`no-unused-export \${tsFiles} --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p src --strict'
  },
  test: [
    'clean-release --config clean-run.config.ts',
    () => checkGitStatus()
  ],
  fix: \`eslint --ext .js,.ts \${tsFiles} --fix\`
}
`
export const cliEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const cliEslintignore = `node_modules
*.d.ts
`
export const cliEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const cliGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const cliMonorepoAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const cliMonorepoCleanScriptsConfigTs = `const tsFiles = \`"packages/**/src/**/*.ts"\`

export default {
  build: [
    'rimraf packages/core/dist/',
    'tsc -p packages/core/src/',
    'rimraf packages/cli/dist/',
    'tsc -p packages/cli/src/',
    'node packages/cli/dist/index.js --supressError > spec/result.txt'
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    export: \`no-unused-export \${tsFiles} --need-module tslib --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`
  },
  test: [],
  fix: \`eslint --ext .js,.ts \${tsFiles} --fix\`
}
`
export const cliMonorepoEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const cliMonorepoEslintignore = `node_modules
*.d.ts
`
export const cliMonorepoEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  }
}
`
export const cliMonorepoGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const cliMonorepoLernaJson = `{
  "packages": [
    "packages/*"
  ],
  "version": "2.0.4",
  "npmClient": "yarn",
  "useWorkspaces": true
}
`
export const cliMonorepoPackagesCliBinCli = `#!/usr/bin/env node
require("../dist/index.js");`
export const cliMonorepoPackagesCliPackageJson = `{
  "name": "repository-name",
  "version": "0.0.1",
  "description": "DESCRIPTION",
  "repository": "https://github.com/AUTHOR/repository-name.git",
  "author": "AUTHOR",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/repository-name/issues"
  },
  "homepage": "https://github.com/AUTHOR/repository-name#readme",
  "dependencies": {
    "minimist": "1",
    "repository-name-core": "^0.0.1"
  },
  "files": [
    "dist",
    "bin"
  ],
  "bin": {
    "repository-name": "bin/repository-name"
  }
}
`
export const cliMonorepoPackagesCliReadmeMd = `# REPOSITORY_NAME

Docs: <https://github.com/AUTHOR/REPOSITORY_NAME>
`
export const cliMonorepoPackagesCliSrcIndexTs = `import minimist from 'minimist'
import * as packageJson from '../package.json'

let suppressError = false

function showToolVersion() {
  console.log(\`Version: \${packageJson.version}\`)
}

function showHelp() {
  console.log(\`Version \${packageJson.version}
Syntax:   REPOSITORY_NAME [options]
Examples: REPOSITORY_NAME
Options:
 -h, --help                                         Print this message.
 -v, --version                                      Print the version
\`)
}

async function executeCommandLine() {
  const argv = minimist(process.argv.slice(2), { '--': true }) as unknown as {
    v?: unknown
    version?: unknown
    suppressError?: unknown
    h?: unknown
    help?: unknown
  }

  const showVersion = argv.v || argv.version
  if (showVersion) {
    showToolVersion()
    return
  }

  if (argv.h || argv.help) {
    showHelp()
    return
  }

  suppressError = !!argv.suppressError

  // todo
}

executeCommandLine().then(() => {
  console.log(\`REPOSITORY_NAME success.\`)
}, (error: unknown) => {
  if (error instanceof Error) {
    console.log(error.message)
  } else {
    console.log(error)
  }
  if (!suppressError) {
    process.exit(1)
  }
})
`
export const cliMonorepoPackagesCliSrcLibDTs = `declare module '*.json' {
  export const version: string
}
`
export const cliMonorepoPackagesCliSrcTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist",
    "module": "commonjs"
  },
  "files": [
    "index.ts",
    "lib.d.ts"
  ]
}
`
export const cliMonorepoPackagesCorePackageJson = `{
  "name": "repository-name-core",
  "version": "0.0.1",
  "description": "DESCRIPTION",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "repository": "https://github.com/AUTHOR/repository-name.git",
  "author": "AUTHOR",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/repository-name/issues"
  },
  "homepage": "https://github.com/AUTHOR/repository-name#readme",
  "dependencies": {
    "tslib": "1"
  },
  "files": [
    "dist"
  ]
}
`
export const cliMonorepoPackagesCoreReadmeMd = `# REPOSITORY_NAME-core

Docs: <https://github.com/AUTHOR/REPOSITORY_NAME>
`
export const cliMonorepoPackagesCoreSrcIndexTs = `/**
 * @public
 */
export default class ComponentTypeName {
}
`
export const cliMonorepoPackagesCoreSrcTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist",
    "module": "commonjs",
    "declaration": true
  },
  "files": [
    "index.ts"
  ]
}
`
export const cliMonorepoReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## install

\`yarn global add REPOSITORY_NAME\`

## usage

run \`REPOSITORY_NAME\`

## options

key | description
--- | ---
-h,--help | Print this message.
-v,--version | Print the version

## API

\`\`\`ts
import { foo } from 'REPOSITORY_NAME-core'
\`\`\`
`
export const cliMonorepoTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const cliReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## install

\`yarn global add REPOSITORY_NAME\`

## usage

run \`REPOSITORY_NAME\`

## options

key | description
--- | ---
-h,--help | Print this message.
-v,--version | Print the version
`
export const cliSrcCoreTs = `export function foo() {

}
`
export const cliSrcIndexTs = `import minimist from 'minimist'
import * as packageJson from '../package.json'

let suppressError = false

function showToolVersion() {
  console.log(\`Version: \${packageJson.version}\`)
}

function showHelp() {
  console.log(\`Version \${packageJson.version}
Syntax:   REPOSITORY_NAME [options]
Examples: REPOSITORY_NAME
Options:
 -h, --help                                         Print this message.
 -v, --version                                      Print the version
\`)
}

async function executeCommandLine() {
  const argv = minimist(process.argv.slice(2), { '--': true }) as unknown as {
    v?: unknown
    version?: unknown
    suppressError?: unknown
    h?: unknown
    help?: unknown
  }

  const showVersion = argv.v || argv.version
  if (showVersion) {
    showToolVersion()
    return
  }

  if (argv.h || argv.help) {
    showHelp()
    return
  }

  suppressError = !!argv.suppressError

  // todo
}

executeCommandLine().then(() => {
  console.log(\`REPOSITORY_NAME success.\`)
}, (error: unknown) => {
  if (error instanceof Error) {
    console.log(error.message)
  } else {
    console.log(error)
  }
  if (!suppressError) {
    process.exit(1)
  }
})
`
export const cliSrcLibDTs = `declare module '*.json' {
  export const version: string
}
`
export const cliSrcTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist",
    "declaration": true,
    "target": "es2018",
    "module": "commonjs"
  }
}
`
export const cliTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const electronAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const electronBrowserslistrc = `last 2 Chrome versions
`
export const electronCleanReleaseConfigTs = `import * as packageJson from './package.json'

const name = packageJson.name
const electronVersion = packageJson.dependencies.electron

export default {
  include: [
    'main.js',
    'scripts/index.css',
    'scripts/index.js',
    'scripts/index.html',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  askVersion: true,
  changesGitStaged: true,
  postScript: ({ version, dir }) => [
    'git add package.json',
    \`git commit -m "\${version}"\`,
    \`git tag -a v\${version} -m "v\${version}"\`,
    'git push',
    \`git push origin v\${version}\`,
    \`cd "\${dir}" && npm i --production\`,
    \`prune-node-modules "\${dir}/node_modules"\`,
    \`electron-packager "\${dir}" "\${name}" --out=dist --arch=x64 --electron-version=\${electronVersion} --platform=darwin --ignore="dist/"\`,
    \`electron-packager "\${dir}" "\${name}" --out=dist --arch=x64 --electron-version=\${electronVersion} --platform=win32 --ignore="dist/"\`,
    \`7z a -r -tzip dist/\${name}-darwin-x64-\${version}.zip dist/\${name}-darwin-x64/\`,
    \`7z a -r -tzip dist/\${name}-win32-x64-\$\${version}.zip dist/\${name}-win32-x64/\`,
    \`electron-installer-windows --src dist/\${name}-win32-x64/ --dest dist/\`,
    \`cd dist && create-dmg \${name}-darwin-x64/\${name}.app\`
  ]
}
`
export const electronCleanScriptsConfigTs = `import { executeScriptAsync } from 'clean-scripts'
import { watch } from 'watch-then-execute'

const tsFiles = \`"src/**/*.ts" "scripts/**/*.ts"\`
const lessFiles = \`"scripts/**/*.less"\`

const templateCommand = 'file2variable-cli --config scripts/file2variable.config.ts'
const webpackCommand = 'webpack --config scripts/webpack.config.ts'
const cssCommand = [
  'lessc scripts/index.less > scripts/index.css',
  'postcss scripts/index.css -o scripts/index.postcss.css',
  'cleancss -o scripts/index.bundle.css scripts/index.postcss.css'
]

export default {
  build: {
    back: 'tsc',
    front: {
      js: [
        templateCommand,
        webpackCommand
      ],
      css: cssCommand
    }
  },
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles} --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p . --strict',
    typeCoverageStatic: 'type-coverage -p static --strict'
  },
  test: {},
  fix: {
    ts: \`eslint --ext .js,.ts \${tsFiles} --fix\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    template: \`\${templateCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['scripts/**/*.less'], [], () => executeScriptAsync(cssCommand))
  }
}
`
export const electronEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const electronEslintignore = `node_modules
`
export const electronEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const electronGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const electronIndexHtml = `<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>news fetcher client v1.2.1</title>
    <link rel="stylesheet" href="scripts/index.bundle.css">
</head>

<body>
    <div id="container"></div>
    <script>
        require("./scripts/index.bundle.js");
    </script>
</body>

</html>`
export const electronMainTs = `import * as electron from 'electron'

let mainWindow: Electron.BrowserWindow | undefined

electron.app.on('window-all-closed', () => {
  electron.app.quit()
})

electron.app.on('ready', () => {
  mainWindow = new electron.BrowserWindow({ width: 1200, height: 800 })
  mainWindow.loadURL(\`file://\${__dirname}/index.html\`)
  mainWindow.on('closed', () => {
    mainWindow = undefined
  })
  mainWindow.webContents.openDevTools()
})
`
export const electronPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const electronReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)
`
export const electronScriptsFile2VariableConfigTs = `export default {
  base: 'scripts',
  files: [
    'scripts/index.template.html'
  ],
  handler: () => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'scripts/variables.ts'
}
`
export const electronScriptsIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
  `
export const electronScriptsIndexTemplateHtml = `<div>
</div>`
export const electronScriptsIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic
})
export class App extends Vue {
}

new App({ el: '#container' })
`
export const electronScriptsTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "target": "es5"
  }
}
`
export const electronScriptsWebpackConfigTs = `import * as webpack from 'webpack'

export default {
  entry: {
    index: './scripts/index'
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js'],
  },
  module: {
    rules: [
      {
        test: /\\.tsx?\$/,
        loader: 'ts-loader',
      },
    ],
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  }
} as webpack.Configuration
`
export const electronStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const electronTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest
`
export const electronTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "resolveJsonModule": true
  },
  "files": [
    "main.ts"
  ]
}
`
export const frontendAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const frontendBrowserslistrc = `last 2 Chrome versions
`
export const frontendCleanScriptsConfigTs = `import { executeScriptAsync } from 'clean-scripts'
import { watch } from 'watch-then-execute'

const tsFiles = \`"*.ts"\`
const lessFiles = \`"*.less"\`

const isDev = process.env.NODE_ENV === 'development'

const templateCommand = 'file2variable-cli --config file2variable.config.ts'
const webpackCommand = 'webpack --config webpack.config.ts'
const revStaticCommand = 'rev-static --config rev-static.config.ts'
const cssCommand = [
  'lessc index.less > index.css',
  'postcss index.css -o index.postcss.css',
  'cleancss -o index.bundle.css index.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css'
]
const swCommand = isDev ? undefined : [
  'sw-precache --config sw-precache.config.js --verbose',
  'uglifyjs service-worker.js -o service-worker.bundle.js'
]

export default {
  build: [
    {
      js: [
        templateCommand,
        webpackCommand
      ],
      css: cssCommand,
      clean: 'rimraf **/*.bundle-*.js *.bundle-*.css'
    },
    revStaticCommand,
    swCommand
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    export: \`no-unused-export \${tsFiles} \${lessFiles} --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p . --strict --ignore-files variables.ts'
  },
  test: [],
  fix: {
    ts: \`eslint --ext .js,.ts \${tsFiles} --fix\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    template: \`\${templateCommand} --watch\`,
    webpack: \`\${webpackCommand} --watch\`,
    less: () => watch(['*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`
  }
}
`
export const frontendEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const frontendEslintignore = `node_modules
*.d.ts
`
export const frontendEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const frontendFile2VariableConfigTs = `export default {
  files: [
    '*.template.html'
  ],
  handler: () => {
    return {
      type: 'vue',
      name: 'App',
      path: './index'
    }
  },
  out: 'variables.ts'
}
`
export const frontendGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
`
export const frontendIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="DESCRIPTION">
<title>REPOSITORY_NAME</title>
<%-inline.indexBundleCss %>
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" data-ribbon="Fork me on GitHub" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<div id="prerender-container">
<div id="container"></div>
</div>
<script src="<%=vendorBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vendorBundleJs %>"></script>
<%-inline.indexBundleJs %>
`
export const frontendIndexLess = `* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
  -webkit-font-smoothing: antialiased;
}
`
export const frontendIndexTemplateHtml = `<div>
</div>`
export const frontendIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic
})
export class App extends Vue {
}

new App({ el: '#container' })
`
export const frontendPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const frontendPrerenderHtml = ``
export const frontendReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)
`
export const frontendRevStaticConfigTs = `export default {
  inputFiles: [
    '*.bundle.js',
    '*.bundle.css',
    '*.ejs.html'
  ],
  excludeFiles: [
    'service-worker.bundle.js'
  ],
  revisedFiles: [
  ],
  inlinedFiles: [
    'index.bundle.js',
    'index.bundle.css'
  ],
  outputFiles: (file: string) => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (filePath: string, fileString: string, md5String: string, baseName: string, extensionName: string) => baseName + '-' + md5String + extensionName,
  fileSize: 'file-size.json'
}
`
export const frontendStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const frontendSwPrecacheConfigJs = `module.exports = {
  staticFileGlobs: [
    'index.html',
    'vendor.bundle-*.js'
  ]
}
`
export const frontendTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest

deploy:
  provider: pages
  skip-cleanup: true
  github-token: \$GITHUB_TOKEN
  keep-history: true
  on:
    branch: master
`
export const frontendTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs"
  },
  "files": [
    "index.ts",
    "variables.ts"
  ]
}
`
export const frontendWebpackConfigTs = `import * as webpack from 'webpack'

export default {
  mode: process.env.NODE_ENV,
  entry: {
    index: './index'
  },
  output: {
    path: __dirname,
    filename: '[name].bundle.js'
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js']
  },
  module: {
    rules: [
      { test: /\\.tsx?\$/, loader: 'ts-loader' }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        commons: {
          test: /[\\\\/]node_modules[\\\\/]/,
          name: 'vendor',
          chunks: 'all'
        }
      }
    }
  }
} as webpack.Configuration
`
export const libraryApiExtractorJson = `{
  "\$schema": "https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json",
  "mainEntryPointFilePath": "<projectFolder>/dist/nodejs/index.d.ts",
  "apiReport": {
    "enabled": true,
    "reportFolder": "<projectFolder>/spec"
  },
  "docModel": {
    "enabled": false
  },
  "dtsRollup": {
    "enabled": true,
    "untrimmedFilePath": "<projectFolder>/dist/nodejs/index.d.ts",
    "publicTrimmedFilePath": "<projectFolder>/dist/index.d.ts"
  },
  "tsdocMetadata": {
    "enabled": false
  },
  "messages": {
    "compilerMessageReporting": {
      "default": {
        "logLevel": "warning"
      }
    },
    "extractorMessageReporting": {
      "default": {
        "logLevel": "warning"
      }
    },
    "tsdocMessageReporting": {
      "default": {
        "logLevel": "warning"
      }
    }
  }
}
`
export const libraryAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const libraryAvaConfigJs = `export default {
  "files": [
    "spec/**/*"
  ],
  "extensions": [
    "ts"
  ],
  "require": [
    "ts-node/register/transpile-only"
  ]
}
`
export const libraryCleanReleaseConfigTs = `export default {
  include: [
    'dist/**/*.js',
    'dist/index.d.ts',
    'LICENSE',
    'package.json',
    'README.md'
  ],
  exclude: [
  ],
  base: 'dist',
  askVersion: true,
  changesGitStaged: true,
  postScript: ({ dir, tag, version }) => [
    tag ? \`npm publish "\${dir}" --access public --tag \${tag}\` : \`npm publish "\${dir}" --access public\`,
    'git add package.json',
    \`git commit -m "\${version}"\`,
    \`git tag -a v\${version} -m 'v\${version}'\`,
    'git push',
    \`git push origin v\${version}\`
  ]
}
`
export const libraryCleanScriptsConfigTs = `const tsFiles = \`"src/**/*.ts" "spec/**/*.ts"\`

export default {
  build: [
    'rimraf dist/',
    {
      back: [
        'tsc -p src/tsconfig.nodejs.json',
        'api-extractor run --local'
      ],
      front: [
        'tsc -p src/tsconfig.browser.json',
        'rollup --config rollup.config.js'
      ]
    }
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    export: \`no-unused-export "src/**/*.ts" --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'type-coverage -p src/tsconfig.nodejs.json --strict',
    typeCoverageBrowser: 'type-coverage -p src/tsconfig.browser.json --strict'
  },
  test: 'ava',
  fix: \`eslint --ext .js,.ts \${tsFiles} --fix\`
}
`
export const libraryEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const libraryEslintignore = `node_modules
*.d.ts
`
export const libraryEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const libraryGitignore = `# Source
.vscode
dist
**/*.js
**/*.css
!*.config.js
!**/*-*.js
!**/*.index.bundle.js
!**/*-*.css
service-worker.js
!*.index.bundle.js
#**/*-*.png
#index.html
*.data
temp
`
export const libraryReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)
[![gzip size](https://img.badgesize.io/https://unpkg.com/REPOSITORY_NAME?compression=gzip)](https://unpkg.com/REPOSITORY_NAME)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## install

\`yarn add REPOSITORY_NAME\`

## usage

\`\`\`ts
import ComponentTypeName from "REPOSITORY_NAME";
// <script src="./node_modules/REPOSITORY_NAME/REPOSITORY_NAME.min.js"></script>
\`\`\`
`
export const libraryRollupConfigJs = `import { uglify } from 'rollup-plugin-uglify'
import resolve from '@rollup/plugin-node-resolve'

export default {
  input: 'dist/browser/index.js',
  plugins: [resolve({ browser: true }), uglify()],
  output: {
    name: 'ComponentTypeName',
    file: 'dist/REPOSITORY_NAME.min.js',
    format: 'umd'
  }
}
`
export const librarySpecIndexTs = `import test from 'ava'

test('title', (t) => {
  t.pass()
})
`
export const librarySrcIndexTs = `/**
 * @public
 */
export default class ComponentTypeName {
}
`
export const librarySrcTsconfigBrowserJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "outDir": "../dist/browser",
    "declaration": true,
    "target": "es5"
  }
}
`
export const librarySrcTsconfigNodejsJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "declaration": true,
    "outDir": "../dist/nodejs",
    "module": "commonjs"
  }
}
`
export const libraryTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
`
export const libraryTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "module": "commonjs"
  }
}
`
export const uiComponentAppveyorYml = `environment:
  nodejs_version: "10"

install:
  - ps: Install-Product node \$env:nodejs_version
  - yarn install --frozen-lockfile

test_script:
  - node --version
  - npm --version
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test

build: off
`
export const uiComponentBrowserslistrc = `last 2 Chrome versions
`
export const uiComponentCleanScriptsConfigTs = `import { executeScriptAsync } from 'clean-scripts'
import { watch } from 'watch-then-execute'

const tsFiles = \`"packages/@(core|vue|react)/@(src|demo)/**/*.@(ts|tsx)"\`
const lessFiles = \`"packages/core/src/**/*.less"\`

const vueTemplateCommand = \`file2variable-cli --config packages/vue/src/file2variable.config.ts\`

const tscCoreSrcCommand = \`tsc -p packages/core/src\`
const tscVueSrcCommand = \`tsc -p packages/vue/src\`
const tscReactSrcCommand = \`tsc -p packages/react/src\`

const webpackVueCommand = \`webpack --config packages/vue/demo/webpack.config.ts\`
const webpackReactCommand = \`webpack --config packages/react/demo/webpack.config.ts\`

const revStaticCommand = \`rev-static --config rev-static.config.ts\`
const cssCommand = [
  \`lessc packages/core/src/index.less --math=strict > packages/core/src/index.css\`,
  \`postcss packages/core/src/index.css -o packages/core/dist/COMPONENT_SHORT_NAME.css\`,
  \`cleancss packages/core/dist/COMPONENT_SHORT_NAME.css -o packages/core/dist/COMPONENT_SHORT_NAME.min.css\`,
  \`cleancss packages/core/dist/COMPONENT_SHORT_NAME.min.css ./node_modules/github-fork-ribbon-css/gh-fork-ribbon.css -o packages/core/demo/index.bundle.css\`
]

const isDev = process.env.NODE_ENV === 'development'

export default {
  build: [
    {
      js: [
        tscCoreSrcCommand,
        {
          vue: [
            vueTemplateCommand,
            tscVueSrcCommand,
            isDev ? undefined : \`rollup --config packages/vue/src/rollup.config.js\`,
            webpackVueCommand
          ],
          react: [
            tscReactSrcCommand,
            isDev ? undefined : \`rollup --config packages/react/src/rollup.config.js\`,
            webpackReactCommand
          ]
        }
      ],
      css: cssCommand,
      clean: \`rimraf "packages/@(core|vue|react)/demo/**/@(*.bundle-*.js|*.bundle-*.css)"\`
    },
    revStaticCommand
  ],
  lint: {
    ts: \`eslint --ext .js,.ts \${tsFiles}\`,
    less: \`stylelint \${lessFiles}\`,
    // export: \`no-unused-export \${tsFiles} \${lessFiles} --exclude \${excludeTsFiles} --strict --need-module tslib\`,
    markdown: \`markdownlint README.md\`,
    typeCoverage: 'lerna exec -- type-coverage -p src --strict'
  },
  test: [],
  fix: {
    ts: \`eslint --ext .js,.ts \${tsFiles} --fix\`,
    less: \`stylelint --fix \${lessFiles}\`
  },
  watch: {
    vueTemplateCommand: \`\${vueTemplateCommand} --watch\`,
    tscCoreSrcCommand: \`\${tscCoreSrcCommand} --watch\`,
    tscVueSrcCommand: \`\${tscVueSrcCommand} --watch\`,
    tscReactSrcCommand: \`\${tscReactSrcCommand} --watch\`,
    webpackVueCommand: \`\${webpackVueCommand} --watch\`,
    webpackReactCommand: \`\${webpackReactCommand} --watch\`,
    less: () => watch(['src/**/*.less'], [], () => executeScriptAsync(cssCommand)),
    rev: \`\${revStaticCommand} --watch\`
  }
}
`
export const uiComponentEditorconfig = `root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
indent_style = space
indent_size = 2
`
export const uiComponentEslintignore = `node_modules
packages/@(core|vue|react)/@(src|demo)
*.d.ts
`
export const uiComponentEslintrc = `{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "plugins": [
    "plantain"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-case-declarations": "off",
    "no-console": "off",
    "plantain/promise-not-await": "error"
  },
  "env": {
    "node": true
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
`
export const uiComponentGitignore = `# Source
.vscode
dist
**/demo/**/*.metadata.json
**/demo/**/*.ngsummary.json
**/demo/**/*.d.ts
*.js
*.css
!*.config.js
!**/*-*.js
!**/*-*.css
!**/*.index.bundle.js
`
export const uiComponentLernaJson = `{
  "packages": [
    "packages/*"
  ],
  "command": {
    "publish": {
      "ignoreChanges": [
        "**/*.md",
        "**/demo/**"
      ]
    }
  },
  "version": "1.0.0",
  "npmClient": "yarn",
  "useWorkspaces": true
}
`
export const uiComponentPackagesCoreDemoIndexTs = ``
export const uiComponentPackagesCoreDemoTsconfigJson = `{
  "extends": "../../tsconfig.json"
}
`
export const uiComponentPackagesCorePackageJson = `{
    "name": "repository-name",
    "version": "1.0.0",
    "description": "DESCRIPTION",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/AUTHOR/repository-name.git"
    },
    "author": "AUTHOR_NAME",
    "license": "MIT",
    "bugs": {
        "url": "https://github.com/AUTHOR/repository-name/issues"
    },
    "homepage": "https://github.com/AUTHOR/repository-name#readme",
    "files": [
        "dist"
    ],
    "dependencies": {
        "tslib": "1"
    }
}
`
export const uiComponentPackagesCoreReadmeMd = `# REPOSITORY_NAME

Docs: <https://github.com/AUTHOR/REPOSITORY_NAME>
`
export const uiComponentPackagesCoreSrcIndexLess = `.componentShortName {
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: "Lucida Grande", "Lucida Sans Unicode", "Hiragino Sans GB", "WenQuanYi Micro Hei", "Verdana,Aril", sans-serif;
    -webkit-font-smoothing: antialiased;
  }
}
`
export const uiComponentPackagesCoreSrcIndexTs = ``
export const uiComponentPackagesCoreSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist",
    "declaration": true
  }
}
`
export const uiComponentPackagesReactDemoIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" data-ribbon="Fork me on GitHub" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<div id="container"></div>
<script src="./<%=reactDemoIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.reactDemoIndexBundleJs %>"></script>
`
export const uiComponentPackagesReactDemoIndexTsx = `import * as React from 'react'
import * as ReactDOM from 'react-dom'
import { componentTypeName } from '../dist/'

function Main() {
  return (
    <div>
      <a href='https://github.com/AUTHOR/REPOSITORY_NAME/tree/master/packages/react/demo' target='_blank'>the source code of the demo</a>
      <br />
      <componentTypeName />
    </div>
  )
}

ReactDOM.render(<Main />, document.getElementById('container'))
`
export const uiComponentPackagesReactDemoTsconfigJson = `{
  "extends": "../../tsconfig.json"
}
`
export const uiComponentPackagesReactDemoWebpackConfigTs = `import * as webpack from 'webpack'

export default {
  mode: process.env.NODE_ENV,
  entry: './packages/react/demo/index',
  resolve: {
    extensions: ['.ts', '.tsx', '.js'],
  },
  module: {
    rules: [
      {
        test: /\\.tsx?\$/,
        loader: 'ts-loader',
      },
    ],
  },
  output: {
    path: __dirname,
    filename: 'index.bundle.js'
  }
} as webpack.Configuration
`
export const uiComponentPackagesReactPackageJson = `{
  "name": "component-short-name-react-component",
  "version": "1.0.0",
  "description": "DESCRIPTION",
  "main": "dist/component-short-name-react-component.min.js",
  "module": "dist/index.js",
  "unpkg": "dist/component-short-name-react-component.min.js",
  "jsdelivr": "dist/component-short-name-react-component.min.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AUTHOR/REPOSITORY_NAME.git"
  },
  "author": "AUTHOR",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/REPOSITORY_NAME/issues"
  },
  "homepage": "https://github.com/AUTHOR/REPOSITORY_NAME#readme",
  "files": [
    "dist"
  ],
  "dependencies": {
    "react": "16",
    "react-dom": "16",
    "REPOSITORY_NAME": "^1.0.0"
  },
  "devDependencies": {
    "@types/react": "16.0.25",
    "@types/react-dom": "16.0.3"
  }
}
`
export const uiComponentPackagesReactReadmeMd = `# COMPONENT_SHORT_NAME-react-component

Docs: <https://github.com/AUTHOR/REPOSITORY_NAME>
`
export const uiComponentPackagesReactSrcIndexTsx = `import * as React from 'react'

/**
 * @public
 */
export function ComponentTypeName() {
  return (
    <div className='COMPONENT_SHORT_NAME'>
    </div>
  )
}
`
export const uiComponentPackagesReactSrcRollupConfigJs = `import { uglify } from 'rollup-plugin-uglify'
import resolve from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'

export default {
  input: 'packages/react/dist/index.js',
  plugins: [
    resolve({ browser: true }),
    uglify(),
    commonjs()
  ],
  output: {
    name: 'ComponentTypeName',
    file: 'packages/react/dist/COMPONENT_SHORT_NAME-react-component.min.js',
    format: 'umd'
  },
  external: [
    'react',
    'react-dom'
  ]
}
`
export const uiComponentPackagesReactSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist",
    "declaration": true
  }
}
`
export const uiComponentPackagesTsconfigJson = `{
  "extends": "tsconfig-plantain",
  "compilerOptions": {
    "target": "es5"
  }
}
`
export const uiComponentPackagesVueDemoIndexEjsHtml = `<!DOCTYPE html>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="renderer" content="webkit" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../../core/demo/<%=coreDemoIndexBundleCss %>" crossOrigin="anonymous" integrity="<%=sri.coreDemoIndexBundleCss %>" />
<a class="github-fork-ribbon right-bottom" href="https://github.com/AUTHOR/REPOSITORY_NAME" data-ribbon="Fork me on GitHub" title="Fork me on GitHub" target="_blank" rel="noopener">Fork me on GitHub</a>
<style>
    .github-fork-ribbon {
        position: fixed;
    }
</style>
<div id="container"></div>
<script src="./<%=vueDemoIndexBundleJs %>" crossOrigin="anonymous" integrity="<%=sri.vueDemoIndexBundleJs %>"></script>
`
export const uiComponentPackagesVueDemoIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import '../dist/'

@Component({
  template: \`
    <div>
        <a href="https://github.com/AUTHOR/REPSOTIRY_NAME/tree/master/packages/vue/demo" target="_blank">the source code of the demo</a>
        <br/>
        <componentShortName>
        </componentShortName>
    </div>
    \`
})
class App extends Vue {
}

new App({ el: '#container' })
`
export const uiComponentPackagesVueDemoTsconfigJson = `{
  "extends": "../../tsconfig.json"
}
`
export const uiComponentPackagesVueDemoWebpackConfigTs = `import * as webpack from 'webpack'

export default {
  mode: process.env.NODE_ENV,
  entry: './packages/vue/demo/index',
  module: {
    rules: [
      {
        test: /\\.tsx?\$/,
        loader: 'ts-loader',
      },
    ],
  },
  output: {
    path: __dirname,
    filename: 'index.bundle.js'
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js'],
    alias: {
      'vue\$': 'vue/dist/vue.esm.js'
    }
  }
} as webpack.Configuration
`
export const uiComponentPackagesVuePackageJson = `{
  "name": "component-short-name-vue-component",
  "version": "1.0.0",
  "description": "DESCRIPTION",
  "main": "dist/component-short-name-vue-component.min.js",
  "module": "dist/index.js",
  "unpkg": "dist/component-short-name-vue-component.min.js",
  "jsdelivr": "dist/component-short-name-vue-component.min.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AUTHOR/REPOSITORY_NAME.git"
  },
  "author": "AUTHOR_NAME",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/AUTHOR/REPOSITORY_NAME/issues"
  },
  "homepage": "https://github.com/AUTHOR/REPOSITORY_NAME#readme",
  "files": [
    "dist"
  ],
  "dependencies": {
    "vue": "2",
    "vue-class-component": "6",
    "REPOSITORY_NAME": "^1.0.0"
  }
}
`
export const uiComponentPackagesVueReadmeMd = `# COMPONENT_SHORT_NAME-vue-component

Docs: <https://github.com/AUTHOR/REPOSITORY_NAME>
`
export const uiComponentPackagesVueSrcFile2VariableConfigTs = `export default {
  base: 'packages/vue/src/',
  files: [
    'packages/vue/src/*.template.html'
  ],
  handler: () => {
    return {
      type: 'vue',
      name: 'COMPONENT_TYPE_NAME',
      path: './index'
    }
  },
  out: 'packages/vue/src/variables.ts'
}
`
export const uiComponentPackagesVueSrcIndexTemplateHtml = `<div class="componentShortName"></div>`
export const uiComponentPackagesVueSrcIndexTs = `import Vue from 'vue'
import Component from 'vue-class-component'
import { indexTemplateHtml, indexTemplateHtmlStatic } from './variables'

@Component({
  render: indexTemplateHtml,
  staticRenderFns: indexTemplateHtmlStatic,
  props: []
})
export class ComponentTypeName extends Vue {
}

Vue.component('COMPONENT_SHORT_NAME', ComponentTypeName)
`
export const uiComponentPackagesVueSrcRollupConfigJs = `import { uglify } from 'rollup-plugin-uglify'
import resolve from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'

export default {
  input: 'packages/vue/dist/index.js',
  plugins: [
    resolve({ browser: true }),
    uglify(),
    commonjs()
  ],
  output: {
    name: 'ComponentTypeName',
    file: 'packages/vue/dist/COMPONENT_SHORT_NAME-vue-component.min.js',
    format: 'umd',
    globals: {
      'vue-class-component': 'VueClassComponent'
    }
  },
  external: [
    'vue',
    'vue-class-component'
  ]
}
`
export const uiComponentPackagesVueSrcTsconfigJson = `{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist",
    "declaration": true
  }
}
`
export const uiComponentPostcssConfigJs = `module.exports = {
  plugins: [
    require('autoprefixer')()
  ]
}
`
export const uiComponentReadmeMd = `
[![Dependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME)
[![devDependency Status](https://david-dm.org/AUTHOR/REPOSITORY_NAME/dev-status.svg)](https://david-dm.org/AUTHOR/REPOSITORY_NAME#info=devDependencies)
[![Build Status: Linux](https://travis-ci.org/AUTHOR/REPOSITORY_NAME.svg?branch=master)](https://travis-ci.org/AUTHOR/REPOSITORY_NAME)
[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/github/AUTHOR/REPOSITORY_NAME?branch=master&svg=true)](https://ci.appveyor.com/project/AUTHOR/REPOSITORY_NAME/branch/master)
[![npm version](https://badge.fury.io/js/REPOSITORY_NAME.svg)](https://badge.fury.io/js/REPOSITORY_NAME)
[![Downloads](https://img.shields.io/npm/dm/REPOSITORY_NAME.svg)](https://www.npmjs.com/package/REPOSITORY_NAME)
[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=\$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2FAUTHOR%2FREPOSITORY_NAME%2Fmaster%2Fpackage.json)](https://github.com/AUTHOR/REPOSITORY_NAME)

## features

+ vuejs component
+ reactjs component
+ custom component

## link css

\`\`\`html
<link rel="stylesheet" href="./node_modules/REPOSITORY_NAME/dist/COMPONENT_SHORT_NAME.min.css" />
\`\`\`

## vuejs component

[![gzip size](https://img.badgesize.io/https://unpkg.com/COMPONENT_SHORT_NAME-vue-component?compression=gzip)](https://unpkg.com/COMPONENT_SHORT_NAME-vue-component)

\`yarn add COMPONENT_SHORT_NAME-vue-component\`

\`\`\`ts
import "COMPONENT_SHORT_NAME-vue-component";
\`\`\`

or

\`\`\`html
<script src="./node_modules/vue/dist/vue.min.js"></script>
<script src="./node_modules/vue-class-component/dist/vue-class-component.min.js"></script>
<script src="./node_modules/COMPONENT_SHORT_NAME-vue-component/dist/COMPONENT_SHORT_NAME-vue-component.min.js"></script>
\`\`\`

\`\`\`html
<COMPONENT_SHORT_NAME :data="data">
</COMPONENT_SHORT_NAME>
\`\`\`

the online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/vue/demo>

## reactjs component

[![gzip size](https://img.badgesize.io/https://unpkg.com/COMPONENT_SHORT_NAME-react-component?compression=gzip)](https://unpkg.com/COMPONENT_SHORT_NAME-react-component)

\`yarn add COMPONENT_SHORT_NAME-react-component\`

\`\`\`ts
import { COMPONENT_TYPE_NAME } from "COMPONENT_SHORT_NAME-react-component";
\`\`\`

or

\`\`\`html
<script src="./node_modules/react/umd/react.production.min.js"></script>
<script src="./node_modules/react-dom/umd/react-dom.production.min.js"></script>
<script src="./node_modules/COMPONENT_SHORT_NAME-react-component/dist/COMPONENT_SHORT_NAME-react-component.min.js"></script>
\`\`\`

\`\`\`jsx
<COMPONENT_TYPE_NAME data={this.data}>
</COMPONENT_TYPE_NAME>
\`\`\`

the online demo: <https://AUTHOR.github.io/REPOSITORY_NAME/packages/react/demo>

## properties and events of the component

name | type | description
--- | --- | ---
data | [COMPONENT_TYPE_NAMEData](#COMPONENT_SHORT_NAME-data-structure)[] | the data of the COMPONENT_SHORT_NAME

## COMPONENT_SHORT_NAME data structure

\`\`\`ts
type COMPONENT_TYPE_NAMEData<T = any> = {
    component: string | Function; // the item component, for vuejs, it is the component name, for reactjs, it is the class object
    data: T; // the data will be passed to the component as \`data\` props
};
\`\`\`
`
export const uiComponentRevStaticConfigTs = `export default {
  inputFiles: [
    'packages/@(vue|react)/demo/**/index.bundle.js',
    'packages/@(vue|react)/demo/**/*.ejs.html',
    'packages/core/demo/*.bundle.css'
  ],
  revisedFiles: [
  ],
  outputFiles: (file: string) => file.replace('.ejs', ''),
  ejsOptions: {
    rmWhitespace: true
  },
  sha: 256,
  customNewFileName: (filePath: string, fileString: string, md5String: string, baseName: string, extensionName: string) => baseName + '-' + md5String + extensionName,
  base: 'packages',
  fileSize: 'file-size.json'
}
`
export const uiComponentStylelintrc = `{
  "extends": "stylelint-config-standard"
}`
export const uiComponentTravisYml = `language: node_js
dist: trusty
node_js:
  - "10"
before_install:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - git fetch --unshallow || true
install:
  - yarn install --frozen-lockfile
script:
  - npm run bootstrap
  - npm run build
  - npm run lint
  - npm run test
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libnss3
  firefox: latest

deploy:
  provider: pages
  skip-cleanup: true
  github-token: \$GITHUB_TOKEN
  keep-history: true
  on:
    branch: master
`
/* eslint-enable */
// tslint:enable
